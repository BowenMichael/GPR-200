//Author Michael Bowen
//Link to shader: https://www.shadertoy.com/view/WtSfDd


vec4 myEffect0(in vec2 fragCoord, in vec2 uv) //Gradient
{
    return vec4(uv.x, 0.5, 0.0, 1.0);
}


vec4 myEffect1(in vec2 fragCoord, in vec2 uv) //Generate checkerBoard
{
    float size = 10.0; //size of grid squares
    vec2 loc = floor(fragCoord / size);//Scales to pizels for the grid based on size
    float sum = loc.x + loc.y;//addes the coords of the new grid
    return mod(sum, 2.0) * vec4(1.0, 1.0, 1.0, 1.0); //if the sum of the coords is positive its black else white   

}

vec4 myEffect2(in vec2 fragCoord, in vec2 uv) //Circle that changes color and size
{
    //generates circle at the center of the screen
    float cPosX = iResolution.x / 2.0;
    float cPosY = iResolution.y / 2.0;
    vec2 center = vec2(cPosX, cPosY);
    float radius = 100.0; //starting radius in pixels
    radius += pow(iTime, 2.0); //increases size of circle over time
    
    float oc = distance(center,fragCoord);//calculates the distance between a pixel and the center of the circle
    vec3 color = vec3(cos(iTime),sin(iTime),cos(iTime + 90.0)); //color inside the circle
    
    //Caclulates weather the pixel is inside or outside the circle
    if(oc > radius){ //outside the circle
        return -vec4(color, 1.0); //inverts the backround from the inside of the circle
    }
    else {//inside the circle
     	return vec4(color, 1.0);   
    }
    return vec4(1.0, 1.0, 1.0, 1.0);
}

vec4 myEffect3(in vec2 fragCoord, in vec2 uv) //combined effect of checkerboard and circle with modifications
{
    float speed = 100.0;
    float cWidth = iResolution.x;
    float cHeight = iResolution.y;
    float cPosX = cWidth/2.0;
    float cPosY = cHeight/2.0;
    
    //Cause the circle to move on a circular plath
   	cPosX += cos(iTime) * speed;
    cPosY += sin(iTime) * speed;
    
    //circle creation
    vec2 center = vec2(cPosX, cPosY);
    float radius = 100.0;
    
    float oc = distance(center,fragCoord);//distance between center of the circle and the current pixel
    vec3 color = vec3(cos(iTime),sin(iTime),cos(iTime + 90.0));//Causes the color to change based on cos and sin
    float size = 10.0; //size of checkerboard
    //Checks if the current pixel is in or outside the circle
    if(oc > radius) { //outside the circle
        
        //Checkerboard code with rotation
        //rotation
        float rotAngle = (iTime); //Rotation angle is based on time to keep it changing
        mat2 rot = mat2( cos(rotAngle), -sin(rotAngle), sin(rotAngle), cos(rotAngle));
        fragCoord *= (rot);
        
        //Caclulationes the pixels in a grid based on size
        vec2 loc = floor((fragCoord) / size);//moves the points onto a smaller grid
        float sum = loc.x + loc.y;
        
        //To designate between checker board
        if(mod(sum, 2.0) == 0.0){
            color = -color;
        }
        return vec4(color, 1.0);
        
        //other tested backrounds
        //modifier = 0.0;
        //color = vec3(uv.x, uv.y, 0.0) + cos(iTime);
   		//return  myEffect1(fragCoord, uv);
        //return -vec4(color, 1.0);
    }
    else {//inside the circle
        
        //Checkerboard code with rotation       
        //rotation
        float rotAngle = (-iTime); //Rotation angle is based on time to keep it changing
        mat2 rot = mat2( cos(rotAngle), -sin(rotAngle), sin(rotAngle), cos(rotAngle));
        fragCoord *= (rot);
        
        //Caclulationes the pixels in a grid based on size
        vec2 loc = floor((fragCoord) / size);//moves the points onto a smaller grid
        float sum = loc.x + loc.y;
        
        //To designate between checker board
        if(mod(sum, 2.0) == 0.0){
            color = -color;
        }
        return vec4(color, 1.0);
        
        //color = vec3(uv.y, uv.x, oc);// + cos(iTime);
     	//return vec4(color, 1.0);   
    }

}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord / iResolution.xy;
	//fragColor = myEffect0(fragCoord, uv);
    //fragColor = myEffect1(fragCoord, uv);
    //fragColor = myEffect2(fragCoord, uv);
    fragColor = myEffect3(fragCoord, uv);
   
}