//global variables
float globalIntensity = .1;
vec4 globalColor = vec4(1.0);
const int MAX_LIGHTS = 5;

//Utilitiy functions
float lenSq(in vec2 x){
    return dot(x,x);
}

float lenSq(in vec3 v){
	return dot(v,v);
}

float squareValue(in float x){
	return x*x;
}

float powerOfTwo (in float base, in int power){
    for(int i = power - 1; i >= 0; --i){
    	base *= base;
    }
	return base;
}



// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

//Structs and their init functions

struct sSphere
{
	float radius;
    vec4 center;
};

void initSphere (out sSphere sphere, in vec3 center, in float radius) 
{
	sphere.center = asPoint(center);
    sphere.radius = radius;

}

struct pLight
{
	vec4 center;
    vec4 color;
    float intensity;
};

void initPointLight(out pLight light, in vec3 center, in vec4 color, in float intensity)
{
  	light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
    
}
    

//Agorithmic functions

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}


    

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
	
    //Scene
    sSphere sphere;
    //initSphere(sphere, vec3(sin(iTime), 0.0, -4.0), .5);
    initSphere(sphere, vec3(0.0, 0.0, -4.0), .5);

   	pLight lights[MAX_LIGHTS];
    
    //initPointLight(pointLight, vec3(0.0,  0.0, -3.5), vec4(1.0), 10.0); //
    initPointLight(lights[0], vec3(2.0,  2.0, 0.0), vec4(1.0), 10.0);
    initPointLight(lights[1], vec3(sin(iTime),  0.0, -3.0 + cos(iTime)), vec4(1.0), 10.0);
    //lights[0] = initPointLight(pointLight, vec3(2.0,  2.0, 0.0), vec4(1.0), 10.0);
    
    
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy; //ray from pixel toward the center of the circle
    float lSq = lenSq(dp.xy), //the length function calulates the square length so it is more efficent just square it
          rSq = squareValue(sphere.radius); 

    
    if(lSq <= rSq){ //if the length of that ray DP^2 is smaller than the radius^2 then it draws the circle. Squared for efficency
    	//inside the circle XY
        //return vec4(1.0);
        
        //Render sphere
        dp.z = rSq - ((dp.x*dp.x)+(dp.y*dp.y));
        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = (position - sphere.center.xyz) / sphere.radius;
       
        
        //point lighting
        vec4 diffuseColor = vec4(normal * 0.5 + 0.5, 1.0);
        vec4 specularColor = vec4(1.0);
        //vec4 reflectionColor = vec4(1.0);
        
        vec4 finalColor;
        for(int i = MAX_LIGHTS-1; i >= 0; --i)
        {
            //Diffuse Intensity
            vec3 lightVector = lights[i].center.xyz - position;
            
            //float lightVectorLength = length(lightVector); //the light vector is needed else where so i define it here
            //vec3 normalizedLightVector = lightVector/lightVectorLength; //rather than using normalize I use the length previously definded
            
            //optimization
            float lightVectorLengthSq = lenSq(lightVector); //saves a square root function
            vec3 normalizedLightVector = lightVector * inversesqrt(lightVectorLengthSq); // multiply by the inverse is more efficent
                
            
            //float diffusionCoefficent = max(0.0, (dot(normal, normalizedLightVector)));
            //float attenuation = 1.0/ (1.0 + lightVectorLength/lights[i].intensity + squareValue(lightVectorLength)/squareValue(lights[i].intensity));
            //float diffuseIntensity = max(0.0, (dot(normal, normalizedLightVector))) * 1.0 / (1.0 + lightVectorLength/lights[i].intensity + squareValue(lightVectorLength/lights[i].intensity)); //Simplified so that only one square value function is called
			
            //optimization
            float diffuseIntensity = max(0.0, dot(normal, normalizedLightVector)) * //diffusion coefficent
                					(1.0 - lightVectorLengthSq/squareValue(lights[i].intensity)); //attenuation
            
            //Speculator Intensity(Phong Reflectance)
            /*vec3 viewVector = normalize(rayOrigin.xyz - position);
            vec3 reflectedLightVector = reflect(-normalizedLightVector, normal);
            float specCoefficent = max(0.0, dot(viewVector, reflectedLightVector));
            float highlightExp = 256.0;
            float specularIntensity = pow(specCoefficent, highlightExp); //Can improve eff*/

            //Blinn-Phong Reflectance
            //vec3 normalViewVector = normalize(rayOrigin.xyz - position);
            //vec3 normalHalfWayVector = normalize(normalizedLightVector + normalViewVector);
            
            //optimization
            vec3 viewVector = rayOrigin.xyz - position; //Created because viewVector is used twice
            vec3 normalViewVector = viewVector * inversesqrt(lenSq(viewVector)); //Multiplied by the inverse and uses the dquared length function
			vec3 halfWayVector = normalizedLightVector + normalViewVector; //Used twice 
            vec3 normalHalfWayVector = halfWayVector * inversesqrt(lenSq(halfWayVector));
            float specCoefficent = max(0.0, dot(normal, normalHalfWayVector)); //Multiplied by the inverse and uses the dquared length function
            float specularIntensity = powerOfTwo(specCoefficent, 7); //improved eff by removing pow function and adding a power of two function

            finalColor += (diffuseIntensity * diffuseColor + specularIntensity * specularColor) * lights[i].color;
    	}
        //Final Color calculation
        vec4 sumOfColors = globalIntensity * globalColor + finalColor;
        return sumOfColors;
    }
    
	// BACKGROUND
    return vec4(.5);
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
}





// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}
